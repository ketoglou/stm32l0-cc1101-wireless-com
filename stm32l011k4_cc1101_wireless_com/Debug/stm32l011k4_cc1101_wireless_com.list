
stm32l011k4_cc1101_wireless_com.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ce8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000da0  08000da0  00010da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dc0  08000dc0  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08000dc0  08000dc0  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dc0  08000dc0  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dc0  08000dc0  00010dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dc4  08000dc4  00010dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08000dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000048  08000e10  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000300  20000198  08000e10  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000292a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000aa5  00000000  00000000  0002299a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00023440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000120  00000000  00000000  000235e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000972d  00000000  00000000  00023708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000025cc  00000000  00000000  0002ce35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00030cd3  00000000  00000000  0002f401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000600d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000039c  00000000  00000000  00060128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000048 	.word	0x20000048
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08000d88 	.word	0x08000d88

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000004c 	.word	0x2000004c
 80000fc:	08000d88 	.word	0x08000d88

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <init_cc1101>:
    0x35,  // TEST1               Various Test Settings
    0x09   // TEST0               Various Test Settings
};
//**************************************************************************************************************************************************************

void init_cc1101(void){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0

	//Software reset CC1101
	uint8_t tx_byte[1] = {SRES};
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4a0c      	ldr	r2, [pc, #48]	; (8000254 <init_cc1101+0x3c>)
 8000222:	7812      	ldrb	r2, [r2, #0]
 8000224:	701a      	strb	r2, [r3, #0]
	spi_transmit_wait(tx_byte,1,CC1101_NSS);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	2200      	movs	r2, #0
 800022a:	2101      	movs	r1, #1
 800022c:	0018      	movs	r0, r3
 800022e:	f000 fc1d 	bl	8000a6c <spi_transmit_wait>

	//Send all registers values
	spi_transmit_wait(rfSettings,48,CC1101_NSS);
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <init_cc1101+0x40>)
 8000234:	2200      	movs	r2, #0
 8000236:	2130      	movs	r1, #48	; 0x30
 8000238:	0018      	movs	r0, r3
 800023a:	f000 fc17 	bl	8000a6c <spi_transmit_wait>

	//Send PA table
	spi_transmit_wait(PA_TABLE,9,CC1101_NSS);
 800023e:	4b07      	ldr	r3, [pc, #28]	; (800025c <init_cc1101+0x44>)
 8000240:	2200      	movs	r2, #0
 8000242:	2109      	movs	r1, #9
 8000244:	0018      	movs	r0, r3
 8000246:	f000 fc11 	bl	8000a6c <spi_transmit_wait>
}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	46bd      	mov	sp, r7
 800024e:	b002      	add	sp, #8
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	08000da0 	.word	0x08000da0
 8000258:	2000000c 	.word	0x2000000c
 800025c:	20000000 	.word	0x20000000

08000260 <cc1101_transmit>:

//**************************************************************************************************************************************************************

void cc1101_transmit(uint8_t *buffer, uint8_t size){
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	000a      	movs	r2, r1
 800026a:	1cfb      	adds	r3, r7, #3
 800026c:	701a      	strb	r2, [r3, #0]

	//Clear Flag
	flag0.f1 = 0;
 800026e:	4b32      	ldr	r3, [pc, #200]	; (8000338 <cc1101_transmit+0xd8>)
 8000270:	781a      	ldrb	r2, [r3, #0]
 8000272:	2102      	movs	r1, #2
 8000274:	438a      	bics	r2, r1
 8000276:	701a      	strb	r2, [r3, #0]

	//Go to IDLE state and wait CC1101 to go to IDLE state
	USER_BUFFER[0] = SIDLE;
 8000278:	4b30      	ldr	r3, [pc, #192]	; (800033c <cc1101_transmit+0xdc>)
 800027a:	2236      	movs	r2, #54	; 0x36
 800027c:	701a      	strb	r2, [r3, #0]
	USER_BUFFER[1] = SNOP;
 800027e:	4b2f      	ldr	r3, [pc, #188]	; (800033c <cc1101_transmit+0xdc>)
 8000280:	223d      	movs	r2, #61	; 0x3d
 8000282:	705a      	strb	r2, [r3, #1]
	while((SPI_RX_BUFFER[1] & 0xF0) != 0x00)
 8000284:	e005      	b.n	8000292 <cc1101_transmit+0x32>
		spi_transmit_wait(USER_BUFFER,2,CC1101_NSS);
 8000286:	4b2d      	ldr	r3, [pc, #180]	; (800033c <cc1101_transmit+0xdc>)
 8000288:	2200      	movs	r2, #0
 800028a:	2102      	movs	r1, #2
 800028c:	0018      	movs	r0, r3
 800028e:	f000 fbed 	bl	8000a6c <spi_transmit_wait>
	while((SPI_RX_BUFFER[1] & 0xF0) != 0x00)
 8000292:	4b2b      	ldr	r3, [pc, #172]	; (8000340 <cc1101_transmit+0xe0>)
 8000294:	785b      	ldrb	r3, [r3, #1]
 8000296:	001a      	movs	r2, r3
 8000298:	23f0      	movs	r3, #240	; 0xf0
 800029a:	4013      	ands	r3, r2
 800029c:	d1f3      	bne.n	8000286 <cc1101_transmit+0x26>

	//Initialize USER_BUFFER[0] with a command
	USER_BUFFER[0] = FIFO_TX_BURST; //Write TX buffer
 800029e:	4b27      	ldr	r3, [pc, #156]	; (800033c <cc1101_transmit+0xdc>)
 80002a0:	227f      	movs	r2, #127	; 0x7f
 80002a2:	701a      	strb	r2, [r3, #0]

	//Copy data to USER_BUFFER
	for(uint8_t i=1;i<(size+1);i++){
 80002a4:	230f      	movs	r3, #15
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	2201      	movs	r2, #1
 80002aa:	701a      	strb	r2, [r3, #0]
 80002ac:	e00f      	b.n	80002ce <cc1101_transmit+0x6e>
		USER_BUFFER[i] = buffer[i-1];
 80002ae:	200f      	movs	r0, #15
 80002b0:	183b      	adds	r3, r7, r0
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	3b01      	subs	r3, #1
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	18d2      	adds	r2, r2, r3
 80002ba:	183b      	adds	r3, r7, r0
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	7811      	ldrb	r1, [r2, #0]
 80002c0:	4a1e      	ldr	r2, [pc, #120]	; (800033c <cc1101_transmit+0xdc>)
 80002c2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=1;i<(size+1);i++){
 80002c4:	183b      	adds	r3, r7, r0
 80002c6:	781a      	ldrb	r2, [r3, #0]
 80002c8:	183b      	adds	r3, r7, r0
 80002ca:	3201      	adds	r2, #1
 80002cc:	701a      	strb	r2, [r3, #0]
 80002ce:	1cfa      	adds	r2, r7, #3
 80002d0:	230f      	movs	r3, #15
 80002d2:	18fb      	adds	r3, r7, r3
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d2e8      	bcs.n	80002ae <cc1101_transmit+0x4e>
	}

	//Send the data
	spi_transmit_wait(USER_BUFFER,size+1,CC1101_NSS);
 80002dc:	1cfb      	adds	r3, r7, #3
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	b29b      	uxth	r3, r3
 80002e2:	3301      	adds	r3, #1
 80002e4:	b299      	uxth	r1, r3
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <cc1101_transmit+0xdc>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 fbbe 	bl	8000a6c <spi_transmit_wait>
	//Start transmission
	USER_BUFFER[0] = STX;
 80002f0:	4b12      	ldr	r3, [pc, #72]	; (800033c <cc1101_transmit+0xdc>)
 80002f2:	2235      	movs	r2, #53	; 0x35
 80002f4:	701a      	strb	r2, [r3, #0]
	spi_transmit_wait(USER_BUFFER,1,CC1101_NSS);
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <cc1101_transmit+0xdc>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	2101      	movs	r1, #1
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 fbb5 	bl	8000a6c <spi_transmit_wait>

	//Wait for transmission to complete
	while(!flag0.f1);
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <cc1101_transmit+0xd8>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2202      	movs	r2, #2
 800030a:	4013      	ands	r3, r2
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0f8      	beq.n	8000304 <cc1101_transmit+0xa4>

	//Flush/Clear TX FIFO
	USER_BUFFER[0] = SFTX;
 8000312:	4b0a      	ldr	r3, [pc, #40]	; (800033c <cc1101_transmit+0xdc>)
 8000314:	223b      	movs	r2, #59	; 0x3b
 8000316:	701a      	strb	r2, [r3, #0]
	spi_transmit_wait(USER_BUFFER,1,CC1101_NSS);
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <cc1101_transmit+0xdc>)
 800031a:	2200      	movs	r2, #0
 800031c:	2101      	movs	r1, #1
 800031e:	0018      	movs	r0, r3
 8000320:	f000 fba4 	bl	8000a6c <spi_transmit_wait>

	//Clear flag
	flag0.f1 = 0;
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <cc1101_transmit+0xd8>)
 8000326:	781a      	ldrb	r2, [r3, #0]
 8000328:	2102      	movs	r1, #2
 800032a:	438a      	bics	r2, r1
 800032c:	701a      	strb	r2, [r3, #0]
}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	46bd      	mov	sp, r7
 8000332:	b004      	add	sp, #16
 8000334:	bd80      	pop	{r7, pc}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	2000006c 	.word	0x2000006c
 800033c:	20000070 	.word	0x20000070
 8000340:	20000090 	.word	0x20000090

08000344 <init_receive_packet>:

//**************************************************************************************************************************************************************

uint16_t init_receive_packet(uint8_t *buffer, uint16_t size){
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	000a      	movs	r2, r1
 800034e:	1cbb      	adds	r3, r7, #2
 8000350:	801a      	strh	r2, [r3, #0]

	buffer[0] = FIFO_RX_BURST; //Read RX buffer
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	22ff      	movs	r2, #255	; 0xff
 8000356:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=1;i<(size+1);i++){
 8000358:	230e      	movs	r3, #14
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	2201      	movs	r2, #1
 800035e:	801a      	strh	r2, [r3, #0]
 8000360:	e00b      	b.n	800037a <init_receive_packet+0x36>
		buffer[i] = SNOP;
 8000362:	210e      	movs	r1, #14
 8000364:	187b      	adds	r3, r7, r1
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	18d3      	adds	r3, r2, r3
 800036c:	223d      	movs	r2, #61	; 0x3d
 800036e:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=1;i<(size+1);i++){
 8000370:	187b      	adds	r3, r7, r1
 8000372:	881a      	ldrh	r2, [r3, #0]
 8000374:	187b      	adds	r3, r7, r1
 8000376:	3201      	adds	r2, #1
 8000378:	801a      	strh	r2, [r3, #0]
 800037a:	1cba      	adds	r2, r7, #2
 800037c:	230e      	movs	r3, #14
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	8812      	ldrh	r2, [r2, #0]
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	429a      	cmp	r2, r3
 8000386:	d2ec      	bcs.n	8000362 <init_receive_packet+0x1e>
	}

	return (size + 1);
 8000388:	1cbb      	adds	r3, r7, #2
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	3301      	adds	r3, #1
 800038e:	b29b      	uxth	r3, r3
}
 8000390:	0018      	movs	r0, r3
 8000392:	46bd      	mov	sp, r7
 8000394:	b004      	add	sp, #16
 8000396:	bd80      	pop	{r7, pc}

08000398 <init_gpio>:
 * Date		:	20/09/2021
 */

#include "gpio.h"

void init_gpio(void){
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0

	//Enable GPIO clock
	RCC->IOPENR |= RCC_IOPENR_IOPAEN; //Port A clock enable
 800039c:	4b4d      	ldr	r3, [pc, #308]	; (80004d4 <init_gpio+0x13c>)
 800039e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003a0:	4b4c      	ldr	r3, [pc, #304]	; (80004d4 <init_gpio+0x13c>)
 80003a2:	2101      	movs	r1, #1
 80003a4:	430a      	orrs	r2, r1
 80003a6:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->IOPENR |= RCC_IOPENR_IOPBEN; //Port B clock enable
 80003a8:	4b4a      	ldr	r3, [pc, #296]	; (80004d4 <init_gpio+0x13c>)
 80003aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003ac:	4b49      	ldr	r3, [pc, #292]	; (80004d4 <init_gpio+0x13c>)
 80003ae:	2102      	movs	r1, #2
 80003b0:	430a      	orrs	r2, r1
 80003b2:	62da      	str	r2, [r3, #44]	; 0x2c
	 * GPIOA_MODER = 0xEBFF FCFF
	 * GPIOx_MODER = 0xFFFF FFFF
	 */

	//SPI INT: PA8 (GPI, Push-Pull, High Speed, Pull down)
	GPIOA->MODER &= ~(GPIO_MODER_MODE8_1 | GPIO_MODER_MODE8_0);
 80003b4:	23a0      	movs	r3, #160	; 0xa0
 80003b6:	05db      	lsls	r3, r3, #23
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	23a0      	movs	r3, #160	; 0xa0
 80003bc:	05db      	lsls	r3, r3, #23
 80003be:	4946      	ldr	r1, [pc, #280]	; (80004d8 <init_gpio+0x140>)
 80003c0:	400a      	ands	r2, r1
 80003c2:	601a      	str	r2, [r3, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED8_1;
 80003c4:	23a0      	movs	r3, #160	; 0xa0
 80003c6:	05db      	lsls	r3, r3, #23
 80003c8:	689a      	ldr	r2, [r3, #8]
 80003ca:	23a0      	movs	r3, #160	; 0xa0
 80003cc:	05db      	lsls	r3, r3, #23
 80003ce:	2180      	movs	r1, #128	; 0x80
 80003d0:	0289      	lsls	r1, r1, #10
 80003d2:	430a      	orrs	r2, r1
 80003d4:	609a      	str	r2, [r3, #8]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD8_1;
 80003d6:	23a0      	movs	r3, #160	; 0xa0
 80003d8:	05db      	lsls	r3, r3, #23
 80003da:	68da      	ldr	r2, [r3, #12]
 80003dc:	23a0      	movs	r3, #160	; 0xa0
 80003de:	05db      	lsls	r3, r3, #23
 80003e0:	2180      	movs	r1, #128	; 0x80
 80003e2:	0289      	lsls	r1, r1, #10
 80003e4:	430a      	orrs	r2, r1
 80003e6:	60da      	str	r2, [r3, #12]

	//SPI MOSI: PA7 (AF, Push-Pull, Medium Speed, No pull up/down)(AF0:MOSI)
	GPIOA->MODER &= ~GPIO_MODER_MODE7_0;
 80003e8:	23a0      	movs	r3, #160	; 0xa0
 80003ea:	05db      	lsls	r3, r3, #23
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	23a0      	movs	r3, #160	; 0xa0
 80003f0:	05db      	lsls	r3, r3, #23
 80003f2:	493a      	ldr	r1, [pc, #232]	; (80004dc <init_gpio+0x144>)
 80003f4:	400a      	ands	r2, r1
 80003f6:	601a      	str	r2, [r3, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED7_0; //Medium speed (2MHz)
 80003f8:	23a0      	movs	r3, #160	; 0xa0
 80003fa:	05db      	lsls	r3, r3, #23
 80003fc:	689a      	ldr	r2, [r3, #8]
 80003fe:	23a0      	movs	r3, #160	; 0xa0
 8000400:	05db      	lsls	r3, r3, #23
 8000402:	2180      	movs	r1, #128	; 0x80
 8000404:	01c9      	lsls	r1, r1, #7
 8000406:	430a      	orrs	r2, r1
 8000408:	609a      	str	r2, [r3, #8]

	//SPI MISO: PA6 (AF, Push-Pull, Medium Speed, No pull up/down)(AF0:MISO)
	GPIOA->MODER &= ~GPIO_MODER_MODE6_0;
 800040a:	23a0      	movs	r3, #160	; 0xa0
 800040c:	05db      	lsls	r3, r3, #23
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	23a0      	movs	r3, #160	; 0xa0
 8000412:	05db      	lsls	r3, r3, #23
 8000414:	4932      	ldr	r1, [pc, #200]	; (80004e0 <init_gpio+0x148>)
 8000416:	400a      	ands	r2, r1
 8000418:	601a      	str	r2, [r3, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED6_0; //Medium speed (2MHz)
 800041a:	23a0      	movs	r3, #160	; 0xa0
 800041c:	05db      	lsls	r3, r3, #23
 800041e:	689a      	ldr	r2, [r3, #8]
 8000420:	23a0      	movs	r3, #160	; 0xa0
 8000422:	05db      	lsls	r3, r3, #23
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	0149      	lsls	r1, r1, #5
 8000428:	430a      	orrs	r2, r1
 800042a:	609a      	str	r2, [r3, #8]

	//SPI SCK: PA5 (AF, Push-Pull, Medium Speed, No pull up/down)(AF0:SCK)
	GPIOA->MODER &= ~GPIO_MODER_MODE5_0;
 800042c:	23a0      	movs	r3, #160	; 0xa0
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	23a0      	movs	r3, #160	; 0xa0
 8000434:	05db      	lsls	r3, r3, #23
 8000436:	492b      	ldr	r1, [pc, #172]	; (80004e4 <init_gpio+0x14c>)
 8000438:	400a      	ands	r2, r1
 800043a:	601a      	str	r2, [r3, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED5_0; //Medium speed (2MHz)
 800043c:	23a0      	movs	r3, #160	; 0xa0
 800043e:	05db      	lsls	r3, r3, #23
 8000440:	689a      	ldr	r2, [r3, #8]
 8000442:	23a0      	movs	r3, #160	; 0xa0
 8000444:	05db      	lsls	r3, r3, #23
 8000446:	2180      	movs	r1, #128	; 0x80
 8000448:	00c9      	lsls	r1, r1, #3
 800044a:	430a      	orrs	r2, r1
 800044c:	609a      	str	r2, [r3, #8]
	//GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED5_1; //High speed (10MHz)

	//SPI CS: PA4 (GPO, Push-Pull, Medium Speed,Pull up)
	GPIOA->MODER |= GPIO_MODER_MODE4_0;
 800044e:	23a0      	movs	r3, #160	; 0xa0
 8000450:	05db      	lsls	r3, r3, #23
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	23a0      	movs	r3, #160	; 0xa0
 8000456:	05db      	lsls	r3, r3, #23
 8000458:	2180      	movs	r1, #128	; 0x80
 800045a:	0049      	lsls	r1, r1, #1
 800045c:	430a      	orrs	r2, r1
 800045e:	601a      	str	r2, [r3, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED4_0; //Medium speed (2MHz)
 8000460:	23a0      	movs	r3, #160	; 0xa0
 8000462:	05db      	lsls	r3, r3, #23
 8000464:	689a      	ldr	r2, [r3, #8]
 8000466:	23a0      	movs	r3, #160	; 0xa0
 8000468:	05db      	lsls	r3, r3, #23
 800046a:	2180      	movs	r1, #128	; 0x80
 800046c:	0049      	lsls	r1, r1, #1
 800046e:	430a      	orrs	r2, r1
 8000470:	609a      	str	r2, [r3, #8]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD4_0;
 8000472:	23a0      	movs	r3, #160	; 0xa0
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	68da      	ldr	r2, [r3, #12]
 8000478:	23a0      	movs	r3, #160	; 0xa0
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	0049      	lsls	r1, r1, #1
 8000480:	430a      	orrs	r2, r1
 8000482:	60da      	str	r2, [r3, #12]

	//LED : PB3 (GPO, Push-Pull, Medium Speed,No pull up/down)
	GPIOB->MODER &= ~GPIO_MODER_MODE3_1;
 8000484:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <init_gpio+0x150>)
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <init_gpio+0x150>)
 800048a:	2180      	movs	r1, #128	; 0x80
 800048c:	438a      	bics	r2, r1
 800048e:	601a      	str	r2, [r3, #0]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEED3_0; //Medium speed (2MHz)
 8000490:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <init_gpio+0x150>)
 8000492:	689a      	ldr	r2, [r3, #8]
 8000494:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <init_gpio+0x150>)
 8000496:	2140      	movs	r1, #64	; 0x40
 8000498:	430a      	orrs	r2, r1
 800049a:	609a      	str	r2, [r3, #8]

	//Button : PA0 (GPI, Push-Pull, High Speed, Pull up)
	GPIOA->MODER &= ~(GPIO_MODER_MODE0_1 | GPIO_MODER_MODE0_0);
 800049c:	23a0      	movs	r3, #160	; 0xa0
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	23a0      	movs	r3, #160	; 0xa0
 80004a4:	05db      	lsls	r3, r3, #23
 80004a6:	2103      	movs	r1, #3
 80004a8:	438a      	bics	r2, r1
 80004aa:	601a      	str	r2, [r3, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEED0_1;
 80004ac:	23a0      	movs	r3, #160	; 0xa0
 80004ae:	05db      	lsls	r3, r3, #23
 80004b0:	689a      	ldr	r2, [r3, #8]
 80004b2:	23a0      	movs	r3, #160	; 0xa0
 80004b4:	05db      	lsls	r3, r3, #23
 80004b6:	2102      	movs	r1, #2
 80004b8:	430a      	orrs	r2, r1
 80004ba:	609a      	str	r2, [r3, #8]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD0_0;
 80004bc:	23a0      	movs	r3, #160	; 0xa0
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	68da      	ldr	r2, [r3, #12]
 80004c2:	23a0      	movs	r3, #160	; 0xa0
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	2101      	movs	r1, #1
 80004c8:	430a      	orrs	r2, r1
 80004ca:	60da      	str	r2, [r3, #12]

}
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	40021000 	.word	0x40021000
 80004d8:	fffcffff 	.word	0xfffcffff
 80004dc:	ffffbfff 	.word	0xffffbfff
 80004e0:	ffffefff 	.word	0xffffefff
 80004e4:	fffffbff 	.word	0xfffffbff
 80004e8:	50000400 	.word	0x50000400

080004ec <init_emb_flash_mem>:

#include "init_system.h"

//**************************************************************************************************************************************************************

void init_emb_flash_mem(void){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

	/*
	 *  ART ACCELARATOR PREFETCH ENABLE
	 *  LATENCY = 0 WS
	 */
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <init_emb_flash_mem+0x24>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <init_emb_flash_mem+0x24>)
 80004f6:	2101      	movs	r1, #1
 80004f8:	438a      	bics	r2, r1
 80004fa:	601a      	str	r2, [r3, #0]
	FLASH->ACR |= FLASH_ACR_PRFTEN;
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <init_emb_flash_mem+0x24>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <init_emb_flash_mem+0x24>)
 8000502:	2102      	movs	r1, #2
 8000504:	430a      	orrs	r2, r1
 8000506:	601a      	str	r2, [r3, #0]

}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	40022000 	.word	0x40022000

08000514 <init_rcc>:

//**************************************************************************************************************************************************************

void init_rcc(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS); //Wait for PLL to be the system clock
	*/


	//MSI => 2MHz clock
	RCC->CR |= RCC_CR_MSION; //MSI ON
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <init_rcc+0x38>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <init_rcc+0x38>)
 800051e:	2180      	movs	r1, #128	; 0x80
 8000520:	0049      	lsls	r1, r1, #1
 8000522:	430a      	orrs	r2, r1
 8000524:	601a      	str	r2, [r3, #0]
	while(!(RCC->CR & RCC_CR_MSIRDY)); //Wait for MSI clock to be ready
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <init_rcc+0x38>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	4013      	ands	r3, r2
 8000532:	d0f9      	beq.n	8000528 <init_rcc+0x14>
	while(RCC->CFGR & RCC_CFGR_SWS); //Wait for MSI to be the system clock
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	4b05      	ldr	r3, [pc, #20]	; (800054c <init_rcc+0x38>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	220c      	movs	r2, #12
 800053c:	4013      	ands	r3, r2
 800053e:	d1fa      	bne.n	8000536 <init_rcc+0x22>

	//CMSIS function set SystemCoreClock variable based on RCC configurations
	SystemCoreClockUpdate();
 8000540:	f000 fac6 	bl	8000ad0 <SystemCoreClockUpdate>
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40021000 	.word	0x40021000

08000550 <init_iwdg>:

//**************************************************************************************************************************************************************

void init_iwdg(void){
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

	//Unlock IWDG_PR, IWDG_RLR registers
	IWDG->KR = 0x5555UL;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <init_iwdg+0x24>)
 8000556:	4a08      	ldr	r2, [pc, #32]	; (8000578 <init_iwdg+0x28>)
 8000558:	601a      	str	r2, [r3, #0]

	//Set prescaler to 16 => 32kHz/16 = 2kHz
	IWDG->PR = 0x02UL;
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <init_iwdg+0x24>)
 800055c:	2202      	movs	r2, #2
 800055e:	605a      	str	r2, [r3, #4]

	//Set reload counter to 500
	//With 2kHz clock we have 500/2000 = 0.25 sec = 250 ms
	IWDG->RLR = 500;
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <init_iwdg+0x24>)
 8000562:	22fa      	movs	r2, #250	; 0xfa
 8000564:	0052      	lsls	r2, r2, #1
 8000566:	609a      	str	r2, [r3, #8]

	//Start the watchdog
	IWDG->KR = 0xCCCCUL;
 8000568:	4b02      	ldr	r3, [pc, #8]	; (8000574 <init_iwdg+0x24>)
 800056a:	4a04      	ldr	r2, [pc, #16]	; (800057c <init_iwdg+0x2c>)
 800056c:	601a      	str	r2, [r3, #0]
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40003000 	.word	0x40003000
 8000578:	00005555 	.word	0x00005555
 800057c:	0000cccc 	.word	0x0000cccc

08000580 <main>:

//Variables
uint8_t msg[TOTAL_MSG_BYTES] = { MSG_BYTES, 'H', 'e', 'l', 'l', 'o', ' ', '1' };	//Message

//**************************************************************************************************************************************************************
int main(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

	init_emb_flash_mem();			//Initialize latency WS
 8000584:	f7ff ffb2 	bl	80004ec <init_emb_flash_mem>
	init_rcc();						//Initialize clock (RCC)
 8000588:	f7ff ffc4 	bl	8000514 <init_rcc>
	init_gpio();					//Initialize GPIOs
 800058c:	f7ff ff04 	bl	8000398 <init_gpio>
	init_spi();						//Initialize SPI
 8000590:	f000 f9a2 	bl	80008d8 <init_spi>
	init_cc1101();					//Initialize CC1101
 8000594:	f7ff fe40 	bl	8000218 <init_cc1101>
	init_timer2();					//Initialize Timer 2 to sample button
 8000598:	f000 fb6c 	bl	8000c74 <init_timer2>
	init_external_irq();			//Initialize interrupts from external source
 800059c:	f000 f87c 	bl	8000698 <init_external_irq>
	init_iwdg();					//Initialize WatchDog (Comment in DEBUG mode)
 80005a0:	f7ff ffd6 	bl	8000550 <init_iwdg>

	//CC1101 Receive Mode Enable
	USER_BUFFER[0] = SRX;
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <main+0xcc>)
 80005a6:	2234      	movs	r2, #52	; 0x34
 80005a8:	701a      	strb	r2, [r3, #0]
	spi_transmit_wait(USER_BUFFER, 1, CC1101_NSS);
 80005aa:	4b28      	ldr	r3, [pc, #160]	; (800064c <main+0xcc>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	2101      	movs	r1, #1
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 fa5b 	bl	8000a6c <spi_transmit_wait>

	while(1){

		//Monitor if we receive something
		if(flag0.f1){
 80005b6:	4b26      	ldr	r3, [pc, #152]	; (8000650 <main+0xd0>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2202      	movs	r2, #2
 80005bc:	4013      	ands	r3, r2
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d022      	beq.n	800060a <main+0x8a>
			//Receive data from CC1101 (USER_BUFFER[0] is garbage data because we send a command first)
			//Data start from SPI_RX_BUFFER[1] and there are MSG_BYTES_NUM bytes in number.
			spi_transmit_wait(USER_BUFFER,init_receive_packet(USER_BUFFER, TOTAL_MSG_BYTES), CC1101_NSS);
 80005c4:	4b21      	ldr	r3, [pc, #132]	; (800064c <main+0xcc>)
 80005c6:	2108      	movs	r1, #8
 80005c8:	0018      	movs	r0, r3
 80005ca:	f7ff febb 	bl	8000344 <init_receive_packet>
 80005ce:	0003      	movs	r3, r0
 80005d0:	0019      	movs	r1, r3
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <main+0xcc>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 fa48 	bl	8000a6c <spi_transmit_wait>
			//Change LED status
			GPIOB->ODR ^= GPIO_ODR_OD3;
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <main+0xd4>)
 80005de:	695a      	ldr	r2, [r3, #20]
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <main+0xd4>)
 80005e2:	2108      	movs	r1, #8
 80005e4:	404a      	eors	r2, r1
 80005e6:	615a      	str	r2, [r3, #20]

			//Clear Flag
			flag0.f1 = 0;
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <main+0xd0>)
 80005ea:	781a      	ldrb	r2, [r3, #0]
 80005ec:	2102      	movs	r1, #2
 80005ee:	438a      	bics	r2, r1
 80005f0:	701a      	strb	r2, [r3, #0]

			//Enable Receive mode again
			USER_BUFFER[0] = SFRX; //Clear RX buffer
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <main+0xcc>)
 80005f4:	223a      	movs	r2, #58	; 0x3a
 80005f6:	701a      	strb	r2, [r3, #0]
			USER_BUFFER[1] = SRX; //Go to Receive Mode
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <main+0xcc>)
 80005fa:	2234      	movs	r2, #52	; 0x34
 80005fc:	705a      	strb	r2, [r3, #1]
			spi_transmit_wait(USER_BUFFER, 2, CC1101_NSS);
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <main+0xcc>)
 8000600:	2200      	movs	r2, #0
 8000602:	2102      	movs	r1, #2
 8000604:	0018      	movs	r0, r3
 8000606:	f000 fa31 	bl	8000a6c <spi_transmit_wait>
		}

		//Monitor if the button is pressed
		if(flag0.f3){
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <main+0xd0>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2208      	movs	r2, #8
 8000610:	4013      	ands	r3, r2
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d015      	beq.n	8000644 <main+0xc4>

			//Send the message
			cc1101_transmit(msg, TOTAL_MSG_BYTES);
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <main+0xd8>)
 800061a:	2108      	movs	r1, #8
 800061c:	0018      	movs	r0, r3
 800061e:	f7ff fe1f 	bl	8000260 <cc1101_transmit>

			//Clear Flag
			flag0.f3 = 0;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <main+0xd0>)
 8000624:	781a      	ldrb	r2, [r3, #0]
 8000626:	2108      	movs	r1, #8
 8000628:	438a      	bics	r2, r1
 800062a:	701a      	strb	r2, [r3, #0]

			//Enable Receive mode again
			USER_BUFFER[0] = SFRX; //Clear RX buffer
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <main+0xcc>)
 800062e:	223a      	movs	r2, #58	; 0x3a
 8000630:	701a      	strb	r2, [r3, #0]
			USER_BUFFER[1] = SRX; //Go to Receive Mode
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <main+0xcc>)
 8000634:	2234      	movs	r2, #52	; 0x34
 8000636:	705a      	strb	r2, [r3, #1]
			spi_transmit_wait(USER_BUFFER, 2, CC1101_NSS);
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <main+0xcc>)
 800063a:	2200      	movs	r2, #0
 800063c:	2102      	movs	r1, #2
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fa14 	bl	8000a6c <spi_transmit_wait>
		}

		//Clear WatchDog (Comment in DEBUG mode)
		CLRWDT();
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <main+0xdc>)
 8000646:	4a06      	ldr	r2, [pc, #24]	; (8000660 <main+0xe0>)
 8000648:	601a      	str	r2, [r3, #0]
		if(flag0.f1){
 800064a:	e7b4      	b.n	80005b6 <main+0x36>
 800064c:	20000070 	.word	0x20000070
 8000650:	2000006c 	.word	0x2000006c
 8000654:	50000400 	.word	0x50000400
 8000658:	2000003c 	.word	0x2000003c
 800065c:	40003000 	.word	0x40003000
 8000660:	0000aaaa 	.word	0x0000aaaa

08000664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	0002      	movs	r2, r0
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000670:	1dfb      	adds	r3, r7, #7
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b7f      	cmp	r3, #127	; 0x7f
 8000676:	d809      	bhi.n	800068c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	001a      	movs	r2, r3
 800067e:	231f      	movs	r3, #31
 8000680:	401a      	ands	r2, r3
 8000682:	4b04      	ldr	r3, [pc, #16]	; (8000694 <__NVIC_EnableIRQ+0x30>)
 8000684:	2101      	movs	r1, #1
 8000686:	4091      	lsls	r1, r2
 8000688:	000a      	movs	r2, r1
 800068a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b002      	add	sp, #8
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000e100 	.word	0xe000e100

08000698 <init_external_irq>:
//Variables
uint8_t button0_counter = 0;		//Used for sampling button

//**************************************************************************************************************************************************************

void init_external_irq(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

	//Enable System configuration controller
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <init_external_irq+0x44>)
 800069e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <init_external_irq+0x44>)
 80006a2:	2101      	movs	r1, #1
 80006a4:	430a      	orrs	r2, r1
 80006a6:	635a      	str	r2, [r3, #52]	; 0x34

	//Enable external interrupt from line 8 		(CC1101 GDO0)
	EXTI->IMR |= EXTI_IMR_IM8;
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <init_external_irq+0x48>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <init_external_irq+0x48>)
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	0049      	lsls	r1, r1, #1
 80006b2:	430a      	orrs	r2, r1
 80006b4:	601a      	str	r2, [r3, #0]
	//Enable interrupt on rising edge from line 8 	(CC1101 GDO0)
	EXTI->RTSR |= EXTI_RTSR_RT8;
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <init_external_irq+0x48>)
 80006b8:	689a      	ldr	r2, [r3, #8]
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <init_external_irq+0x48>)
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	0049      	lsls	r1, r1, #1
 80006c0:	430a      	orrs	r2, r1
 80006c2:	609a      	str	r2, [r3, #8]
	//Configure PA8 as interrupt source 			(CC1101 GDO0)
	SYSCFG->EXTICR[2] &= (0xFFF0 | SYSCFG_EXTICR3_EXTI8_PA);
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <init_external_irq+0x4c>)
 80006c6:	691a      	ldr	r2, [r3, #16]
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <init_external_irq+0x4c>)
 80006ca:	4907      	ldr	r1, [pc, #28]	; (80006e8 <init_external_irq+0x50>)
 80006cc:	400a      	ands	r2, r1
 80006ce:	611a      	str	r2, [r3, #16]

	//Enable EXTI4_15 Interrupt
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006d0:	2007      	movs	r0, #7
 80006d2:	f7ff ffc7 	bl	8000664 <__NVIC_EnableIRQ>
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010400 	.word	0x40010400
 80006e4:	40010000 	.word	0x40010000
 80006e8:	0000fff0 	.word	0x0000fff0

080006ec <SPI1_IRQHandler>:

//**************************************************************************************************************************************************************

void SPI1_IRQHandler(void){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

	//RX buffer not empty interrupt
	if(SPI1->SR & SPI_SR_RXNE){
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <SPI1_IRQHandler+0x84>)
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	2201      	movs	r2, #1
 80006f6:	4013      	ands	r3, r2
 80006f8:	d00d      	beq.n	8000716 <SPI1_IRQHandler+0x2a>
		SPI_RX_BUFFER[SPI_RX_COUNTER] = SPI1->DR;
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <SPI1_IRQHandler+0x84>)
 80006fc:	68d9      	ldr	r1, [r3, #12]
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <SPI1_IRQHandler+0x88>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	001a      	movs	r2, r3
 8000704:	b2c9      	uxtb	r1, r1
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <SPI1_IRQHandler+0x8c>)
 8000708:	5499      	strb	r1, [r3, r2]
		SPI_RX_COUNTER ++;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <SPI1_IRQHandler+0x88>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	b29a      	uxth	r2, r3
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <SPI1_IRQHandler+0x88>)
 8000714:	801a      	strh	r2, [r3, #0]
	}

	//TX buffer empty interrupt
	if(SPI1->SR & SPI_SR_TXE){
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <SPI1_IRQHandler+0x84>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	2202      	movs	r2, #2
 800071c:	4013      	ands	r3, r2
 800071e:	d023      	beq.n	8000768 <SPI1_IRQHandler+0x7c>

		if(!SPI_TX_SIZE){
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <SPI1_IRQHandler+0x90>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d10c      	bne.n	8000742 <SPI1_IRQHandler+0x56>
			//Disable NSS pin
			nss_pin_handler(CURRENT_NSS,0);
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <SPI1_IRQHandler+0x94>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2100      	movs	r1, #0
 800072e:	0018      	movs	r0, r3
 8000730:	f000 f916 	bl	8000960 <nss_pin_handler>
			//Disable SPI TX interrupt
			SPI1->CR2 &= ~SPI_CR2_TXEIE;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <SPI1_IRQHandler+0x84>)
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <SPI1_IRQHandler+0x84>)
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	438a      	bics	r2, r1
 800073e:	605a      	str	r2, [r3, #4]
			SPI_TX_COUNTER ++;
		}

	}

}
 8000740:	e012      	b.n	8000768 <SPI1_IRQHandler+0x7c>
			SPI1->DR = SPI_TX_BUFFER[SPI_TX_COUNTER];
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <SPI1_IRQHandler+0x98>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	001a      	movs	r2, r3
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SPI1_IRQHandler+0x9c>)
 800074a:	5c9a      	ldrb	r2, [r3, r2]
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <SPI1_IRQHandler+0x84>)
 800074e:	60da      	str	r2, [r3, #12]
			SPI_TX_SIZE --;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <SPI1_IRQHandler+0x90>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	3b01      	subs	r3, #1
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <SPI1_IRQHandler+0x90>)
 800075a:	801a      	strh	r2, [r3, #0]
			SPI_TX_COUNTER ++;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <SPI1_IRQHandler+0x98>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	b29a      	uxth	r2, r3
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <SPI1_IRQHandler+0x98>)
 8000766:	801a      	strh	r2, [r3, #0]
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40013000 	.word	0x40013000
 8000774:	20000110 	.word	0x20000110
 8000778:	20000090 	.word	0x20000090
 800077c:	20000112 	.word	0x20000112
 8000780:	20000114 	.word	0x20000114
 8000784:	20000068 	.word	0x20000068
 8000788:	20000118 	.word	0x20000118

0800078c <EXTI4_15_IRQHandler>:
 * Line 8 Pin:
 * Asserts when sync word has been sent / received, and de-asserts at the end of the packet.
 * In RX, the pin will also de-assert when a packet is discarded due to address or maximum length
 * filtering or when the radio enters RXFIFO_OVERFLOW state. In TX the pin will de-assert if the TX FIFO underflows.
 */
void EXTI4_15_IRQHandler(void){
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

	//Interrupt on line 8
	if(EXTI->PR & EXTI_PR_PIF8){
 8000790:	4b20      	ldr	r3, [pc, #128]	; (8000814 <EXTI4_15_IRQHandler+0x88>)
 8000792:	695a      	ldr	r2, [r3, #20]
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4013      	ands	r3, r2
 800079a:	d037      	beq.n	800080c <EXTI4_15_IRQHandler+0x80>

		if(!flag0.f0){
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <EXTI4_15_IRQHandler+0x8c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2201      	movs	r2, #1
 80007a2:	4013      	ands	r3, r2
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d112      	bne.n	80007d0 <EXTI4_15_IRQHandler+0x44>
			//Disable interrupt on rising edge from line 8
			EXTI->RTSR &= ~EXTI_RTSR_RT8;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <EXTI4_15_IRQHandler+0x88>)
 80007ac:	689a      	ldr	r2, [r3, #8]
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <EXTI4_15_IRQHandler+0x88>)
 80007b0:	491a      	ldr	r1, [pc, #104]	; (800081c <EXTI4_15_IRQHandler+0x90>)
 80007b2:	400a      	ands	r2, r1
 80007b4:	609a      	str	r2, [r3, #8]
			//Enable interrupt on falling edge from line 8
			EXTI->FTSR |= EXTI_FTSR_FT8;
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <EXTI4_15_IRQHandler+0x88>)
 80007b8:	68da      	ldr	r2, [r3, #12]
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <EXTI4_15_IRQHandler+0x88>)
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	0049      	lsls	r1, r1, #1
 80007c0:	430a      	orrs	r2, r1
 80007c2:	60da      	str	r2, [r3, #12]
			flag0.f0 = 1;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <EXTI4_15_IRQHandler+0x8c>)
 80007c6:	781a      	ldrb	r2, [r3, #0]
 80007c8:	2101      	movs	r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	701a      	strb	r2, [r3, #0]
 80007ce:	e016      	b.n	80007fe <EXTI4_15_IRQHandler+0x72>
		}else{
			//Enable interrupt on rising edge from line 8
			EXTI->RTSR |= EXTI_RTSR_RT8;
 80007d0:	4b10      	ldr	r3, [pc, #64]	; (8000814 <EXTI4_15_IRQHandler+0x88>)
 80007d2:	689a      	ldr	r2, [r3, #8]
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <EXTI4_15_IRQHandler+0x88>)
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	0049      	lsls	r1, r1, #1
 80007da:	430a      	orrs	r2, r1
 80007dc:	609a      	str	r2, [r3, #8]
			//Disable interrupt on falling edge from line 8
			EXTI->FTSR &= ~EXTI_FTSR_FT8;
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <EXTI4_15_IRQHandler+0x88>)
 80007e0:	68da      	ldr	r2, [r3, #12]
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <EXTI4_15_IRQHandler+0x88>)
 80007e4:	490d      	ldr	r1, [pc, #52]	; (800081c <EXTI4_15_IRQHandler+0x90>)
 80007e6:	400a      	ands	r2, r1
 80007e8:	60da      	str	r2, [r3, #12]
			flag0.f0 = 1;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <EXTI4_15_IRQHandler+0x8c>)
 80007ec:	781a      	ldrb	r2, [r3, #0]
 80007ee:	2101      	movs	r1, #1
 80007f0:	430a      	orrs	r2, r1
 80007f2:	701a      	strb	r2, [r3, #0]
			flag0.f1 = 1;
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <EXTI4_15_IRQHandler+0x8c>)
 80007f6:	781a      	ldrb	r2, [r3, #0]
 80007f8:	2102      	movs	r1, #2
 80007fa:	430a      	orrs	r2, r1
 80007fc:	701a      	strb	r2, [r3, #0]
		}

		//Clear flag
		EXTI->PR |= EXTI_PR_PIF8;
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <EXTI4_15_IRQHandler+0x88>)
 8000800:	695a      	ldr	r2, [r3, #20]
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <EXTI4_15_IRQHandler+0x88>)
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	0049      	lsls	r1, r1, #1
 8000808:	430a      	orrs	r2, r1
 800080a:	615a      	str	r2, [r3, #20]
	}
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	40010400 	.word	0x40010400
 8000818:	2000006c 	.word	0x2000006c
 800081c:	fffffeff 	.word	0xfffffeff

08000820 <TIM2_IRQHandler>:

//**************************************************************************************************************************************************************

void TIM2_IRQHandler(void){
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

	//Sampling Button
	//-----------------------------------------------------
	if(GPIOA->IDR & 0x01){
 8000824:	23a0      	movs	r3, #160	; 0xa0
 8000826:	05db      	lsls	r3, r3, #23
 8000828:	691b      	ldr	r3, [r3, #16]
 800082a:	2201      	movs	r2, #1
 800082c:	4013      	ands	r3, r2
 800082e:	d008      	beq.n	8000842 <TIM2_IRQHandler+0x22>
		button0_counter = 0;
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <TIM2_IRQHandler+0x7c>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
		flag0.f2 = 0;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <TIM2_IRQHandler+0x80>)
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	2104      	movs	r1, #4
 800083c:	438a      	bics	r2, r1
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	e00c      	b.n	800085c <TIM2_IRQHandler+0x3c>
	}else{
		if(!flag0.f2)
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <TIM2_IRQHandler+0x80>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2204      	movs	r2, #4
 8000848:	4013      	ands	r3, r2
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d105      	bne.n	800085c <TIM2_IRQHandler+0x3c>
			button0_counter ++;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <TIM2_IRQHandler+0x7c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	3301      	adds	r3, #1
 8000856:	b2da      	uxtb	r2, r3
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <TIM2_IRQHandler+0x7c>)
 800085a:	701a      	strb	r2, [r3, #0]
	}

	if(button0_counter == 10 && !flag0.f2){
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <TIM2_IRQHandler+0x7c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b0a      	cmp	r3, #10
 8000862:	d110      	bne.n	8000886 <TIM2_IRQHandler+0x66>
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <TIM2_IRQHandler+0x80>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2204      	movs	r2, #4
 800086a:	4013      	ands	r3, r2
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d109      	bne.n	8000886 <TIM2_IRQHandler+0x66>
		flag0.f3 = 1;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <TIM2_IRQHandler+0x80>)
 8000874:	781a      	ldrb	r2, [r3, #0]
 8000876:	2108      	movs	r1, #8
 8000878:	430a      	orrs	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
		flag0.f2 = 1;
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <TIM2_IRQHandler+0x80>)
 800087e:	781a      	ldrb	r2, [r3, #0]
 8000880:	2104      	movs	r1, #4
 8000882:	430a      	orrs	r2, r1
 8000884:	701a      	strb	r2, [r3, #0]
	}
	//-----------------------------------------------------


	//Clear Timer 2 Flag
	TIM2->SR &= ~TIM_SR_UIF;
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	691a      	ldr	r2, [r3, #16]
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	05db      	lsls	r3, r3, #23
 8000890:	2101      	movs	r1, #1
 8000892:	438a      	bics	r2, r1
 8000894:	611a      	str	r2, [r3, #16]
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000064 	.word	0x20000064
 80008a0:	2000006c 	.word	0x2000006c

080008a4 <__NVIC_EnableIRQ>:
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	0002      	movs	r2, r0
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b7f      	cmp	r3, #127	; 0x7f
 80008b6:	d809      	bhi.n	80008cc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b8:	1dfb      	adds	r3, r7, #7
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	001a      	movs	r2, r3
 80008be:	231f      	movs	r3, #31
 80008c0:	401a      	ands	r2, r3
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <__NVIC_EnableIRQ+0x30>)
 80008c4:	2101      	movs	r1, #1
 80008c6:	4091      	lsls	r1, r2
 80008c8:	000a      	movs	r2, r1
 80008ca:	601a      	str	r2, [r3, #0]
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b002      	add	sp, #8
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	e000e100 	.word	0xe000e100

080008d8 <init_spi>:

#include "spi.h"

//**************************************************************************************************************************************************************

void init_spi(void){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

	//Enable SPI clock
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80008dc:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <init_spi+0x78>)
 80008de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <init_spi+0x78>)
 80008e2:	2180      	movs	r1, #128	; 0x80
 80008e4:	0149      	lsls	r1, r1, #5
 80008e6:	430a      	orrs	r2, r1
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34

	//Uncomment if 24MHz clock is used
	//SPI1->CR1 |= SPI_CR1_BR_0; //fPCLK/4 = 24/4 = 6MHz
	//Uncomment if 2.1MHz (MSI) clock is used
	SPI1->CR1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);		//fPCLK/8 = 2.1/2 = 1.05 MHz
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <init_spi+0x7c>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <init_spi+0x7c>)
 80008f0:	2138      	movs	r1, #56	; 0x38
 80008f2:	438a      	bics	r2, r1
 80008f4:	601a      	str	r2, [r3, #0]

	SPI1->CR1 |= SPI_CR1_MSTR; 										//Master mode
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <init_spi+0x7c>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <init_spi+0x7c>)
 80008fc:	2104      	movs	r1, #4
 80008fe:	430a      	orrs	r2, r1
 8000900:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= (SPI_CR1_SSM | SPI_CR1_SSI); 						//Software NSS
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <init_spi+0x7c>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <init_spi+0x7c>)
 8000908:	21c0      	movs	r1, #192	; 0xc0
 800090a:	0089      	lsls	r1, r1, #2
 800090c:	430a      	orrs	r2, r1
 800090e:	601a      	str	r2, [r3, #0]
	SPI1->CR2 |= SPI_CR2_RXNEIE; 									//RX interrupt enable
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <init_spi+0x7c>)
 8000912:	685a      	ldr	r2, [r3, #4]
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <init_spi+0x7c>)
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	430a      	orrs	r2, r1
 800091a:	605a      	str	r2, [r3, #4]

	SPI_RX_COUNTER = 0;
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <init_spi+0x80>)
 800091e:	2200      	movs	r2, #0
 8000920:	801a      	strh	r2, [r3, #0]
	SPI_TX_SIZE = 0;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <init_spi+0x84>)
 8000924:	2200      	movs	r2, #0
 8000926:	801a      	strh	r2, [r3, #0]

	//Disable chip select pins
	CC1101_CS_PIN_DIS();
 8000928:	23a0      	movs	r3, #160	; 0xa0
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	695a      	ldr	r2, [r3, #20]
 800092e:	23a0      	movs	r3, #160	; 0xa0
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	2110      	movs	r1, #16
 8000934:	430a      	orrs	r2, r1
 8000936:	615a      	str	r2, [r3, #20]

	//Enable SPI Interrupt
	NVIC_EnableIRQ(SPI1_IRQn);
 8000938:	2019      	movs	r0, #25
 800093a:	f7ff ffb3 	bl	80008a4 <__NVIC_EnableIRQ>

	//Enable SPI module
	SPI1->CR1 |= SPI_CR1_SPE;
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <init_spi+0x7c>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <init_spi+0x7c>)
 8000944:	2140      	movs	r1, #64	; 0x40
 8000946:	430a      	orrs	r2, r1
 8000948:	601a      	str	r2, [r3, #0]

}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40021000 	.word	0x40021000
 8000954:	40013000 	.word	0x40013000
 8000958:	20000110 	.word	0x20000110
 800095c:	20000112 	.word	0x20000112

08000960 <nss_pin_handler>:

//**************************************************************************************************************************************************************

void nss_pin_handler(nss_pin pin, uint8_t state){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	0002      	movs	r2, r0
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	701a      	strb	r2, [r3, #0]
 800096c:	1dbb      	adds	r3, r7, #6
 800096e:	1c0a      	adds	r2, r1, #0
 8000970:	701a      	strb	r2, [r3, #0]

	if(pin == CC1101_NSS){
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d114      	bne.n	80009a4 <nss_pin_handler+0x44>
		if(state)
 800097a:	1dbb      	adds	r3, r7, #6
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d008      	beq.n	8000994 <nss_pin_handler+0x34>
			CC1101_CS_PIN_EN();
 8000982:	23a0      	movs	r3, #160	; 0xa0
 8000984:	05db      	lsls	r3, r3, #23
 8000986:	695a      	ldr	r2, [r3, #20]
 8000988:	23a0      	movs	r3, #160	; 0xa0
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	2110      	movs	r1, #16
 800098e:	438a      	bics	r2, r1
 8000990:	615a      	str	r2, [r3, #20]
		else
			CC1101_CS_PIN_DIS();
	}
}
 8000992:	e007      	b.n	80009a4 <nss_pin_handler+0x44>
			CC1101_CS_PIN_DIS();
 8000994:	23a0      	movs	r3, #160	; 0xa0
 8000996:	05db      	lsls	r3, r3, #23
 8000998:	695a      	ldr	r2, [r3, #20]
 800099a:	23a0      	movs	r3, #160	; 0xa0
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	2110      	movs	r1, #16
 80009a0:	430a      	orrs	r2, r1
 80009a2:	615a      	str	r2, [r3, #20]
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b002      	add	sp, #8
 80009aa:	bd80      	pop	{r7, pc}

080009ac <spi_transmit>:

//**************************************************************************************************************************************************************

uint8_t spi_transmit(uint8_t *buffer,uint16_t size, nss_pin pin){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	0008      	movs	r0, r1
 80009b6:	0011      	movs	r1, r2
 80009b8:	1cbb      	adds	r3, r7, #2
 80009ba:	1c02      	adds	r2, r0, #0
 80009bc:	801a      	strh	r2, [r3, #0]
 80009be:	1c7b      	adds	r3, r7, #1
 80009c0:	1c0a      	adds	r2, r1, #0
 80009c2:	701a      	strb	r2, [r3, #0]

	if(!(SPI1->SR & SPI_SR_BSY) && !SPI_TX_SIZE){
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <spi_transmit+0xac>)
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	2280      	movs	r2, #128	; 0x80
 80009ca:	4013      	ands	r3, r2
 80009cc:	d13e      	bne.n	8000a4c <spi_transmit+0xa0>
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <spi_transmit+0xb0>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d13a      	bne.n	8000a4c <spi_transmit+0xa0>

		//Copy data to buffer
		for(uint16_t i=1;i<size;i++){
 80009d6:	230e      	movs	r3, #14
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	2201      	movs	r2, #1
 80009dc:	801a      	strh	r2, [r3, #0]
 80009de:	e00f      	b.n	8000a00 <spi_transmit+0x54>
			SPI_TX_BUFFER[i-1] = buffer[i];
 80009e0:	200e      	movs	r0, #14
 80009e2:	183b      	adds	r3, r7, r0
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	18d2      	adds	r2, r2, r3
 80009ea:	183b      	adds	r3, r7, r0
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	7811      	ldrb	r1, [r2, #0]
 80009f2:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <spi_transmit+0xb4>)
 80009f4:	54d1      	strb	r1, [r2, r3]
		for(uint16_t i=1;i<size;i++){
 80009f6:	183b      	adds	r3, r7, r0
 80009f8:	881a      	ldrh	r2, [r3, #0]
 80009fa:	183b      	adds	r3, r7, r0
 80009fc:	3201      	adds	r2, #1
 80009fe:	801a      	strh	r2, [r3, #0]
 8000a00:	230e      	movs	r3, #14
 8000a02:	18fa      	adds	r2, r7, r3
 8000a04:	1cbb      	adds	r3, r7, #2
 8000a06:	8812      	ldrh	r2, [r2, #0]
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d3e8      	bcc.n	80009e0 <spi_transmit+0x34>
		}

		//Data number
		SPI_TX_SIZE = size - 1;
 8000a0e:	1cbb      	adds	r3, r7, #2
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <spi_transmit+0xb0>)
 8000a18:	801a      	strh	r2, [r3, #0]
		SPI_TX_COUNTER = 0;
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <spi_transmit+0xb8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	801a      	strh	r2, [r3, #0]

		//Enable NSS pin
		CURRENT_NSS = pin;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <spi_transmit+0xbc>)
 8000a22:	1c7a      	adds	r2, r7, #1
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	701a      	strb	r2, [r3, #0]
		nss_pin_handler(pin,1);
 8000a28:	1c7b      	adds	r3, r7, #1
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff ff96 	bl	8000960 <nss_pin_handler>

		//Load register with the first byte to be transmitted
		SPI1->DR = buffer[0];
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	781a      	ldrb	r2, [r3, #0]
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <spi_transmit+0xac>)
 8000a3a:	60da      	str	r2, [r3, #12]

		//Enable SPI TX interrupt
		SPI1->CR2 |= SPI_CR2_TXEIE;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <spi_transmit+0xac>)
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <spi_transmit+0xac>)
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	430a      	orrs	r2, r1
 8000a46:	605a      	str	r2, [r3, #4]

		return 1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e000      	b.n	8000a4e <spi_transmit+0xa2>

	}
	return 0;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	0018      	movs	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b004      	add	sp, #16
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	40013000 	.word	0x40013000
 8000a5c:	20000112 	.word	0x20000112
 8000a60:	20000118 	.word	0x20000118
 8000a64:	20000068 	.word	0x20000068
 8000a68:	20000114 	.word	0x20000114

08000a6c <spi_transmit_wait>:

//**************************************************************************************************************************************************************

void spi_transmit_wait(uint8_t *buffer,uint16_t size, nss_pin pin){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	0008      	movs	r0, r1
 8000a76:	0011      	movs	r1, r2
 8000a78:	1cbb      	adds	r3, r7, #2
 8000a7a:	1c02      	adds	r2, r0, #0
 8000a7c:	801a      	strh	r2, [r3, #0]
 8000a7e:	1c7b      	adds	r3, r7, #1
 8000a80:	1c0a      	adds	r2, r1, #0
 8000a82:	701a      	strb	r2, [r3, #0]
	SPI_RX_COUNTER = 0;
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <spi_transmit_wait+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	801a      	strh	r2, [r3, #0]
	while(!spi_transmit(buffer,size, pin));
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	1c7b      	adds	r3, r7, #1
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	1cbb      	adds	r3, r7, #2
 8000a92:	8819      	ldrh	r1, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	0018      	movs	r0, r3
 8000a98:	f7ff ff88 	bl	80009ac <spi_transmit>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d0f5      	beq.n	8000a8c <spi_transmit_wait+0x20>
	while(SPI_TX_COUNTER < (size - 1));
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <spi_transmit_wait+0x54>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	001a      	movs	r2, r3
 8000aa8:	1cbb      	adds	r3, r7, #2
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	dbf7      	blt.n	8000aa2 <spi_transmit_wait+0x36>
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000110 	.word	0x20000110
 8000ac0:	20000068 	.word	0x20000068

08000ac4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmul = 0U, plldiv = 0U, pllsource = 0U, msirange = 0U;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000aea:	4b4e      	ldr	r3, [pc, #312]	; (8000c24 <SystemCoreClockUpdate+0x154>)
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	220c      	movs	r2, #12
 8000af0:	4013      	ands	r3, r2
 8000af2:	617b      	str	r3, [r7, #20]

  switch (tmp)
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	2b08      	cmp	r3, #8
 8000af8:	d024      	beq.n	8000b44 <SystemCoreClockUpdate+0x74>
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	2b08      	cmp	r3, #8
 8000afe:	d825      	bhi.n	8000b4c <SystemCoreClockUpdate+0x7c>
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d003      	beq.n	8000b0e <SystemCoreClockUpdate+0x3e>
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	2b04      	cmp	r3, #4
 8000b0a:	d00e      	beq.n	8000b2a <SystemCoreClockUpdate+0x5a>
 8000b0c:	e01e      	b.n	8000b4c <SystemCoreClockUpdate+0x7c>
  {
    case 0x00U:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> RCC_ICSCR_MSIRANGE_Pos;
 8000b0e:	4b45      	ldr	r3, [pc, #276]	; (8000c24 <SystemCoreClockUpdate+0x154>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	0b5b      	lsrs	r3, r3, #13
 8000b14:	2207      	movs	r2, #7
 8000b16:	4013      	ands	r3, r2
 8000b18:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	0212      	lsls	r2, r2, #8
 8000b22:	409a      	lsls	r2, r3
 8000b24:	4b40      	ldr	r3, [pc, #256]	; (8000c28 <SystemCoreClockUpdate+0x158>)
 8000b26:	601a      	str	r2, [r3, #0]
      break;
 8000b28:	e069      	b.n	8000bfe <SystemCoreClockUpdate+0x12e>
    case 0x04U:  /* HSI used as system clock */
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000b2a:	4b3e      	ldr	r3, [pc, #248]	; (8000c24 <SystemCoreClockUpdate+0x154>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2210      	movs	r2, #16
 8000b30:	4013      	ands	r3, r2
 8000b32:	d003      	beq.n	8000b3c <SystemCoreClockUpdate+0x6c>
      {
        SystemCoreClock = HSI_VALUE / 4U;
 8000b34:	4b3c      	ldr	r3, [pc, #240]	; (8000c28 <SystemCoreClockUpdate+0x158>)
 8000b36:	4a3d      	ldr	r2, [pc, #244]	; (8000c2c <SystemCoreClockUpdate+0x15c>)
 8000b38:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = HSI_VALUE;
      }
      break;
 8000b3a:	e060      	b.n	8000bfe <SystemCoreClockUpdate+0x12e>
        SystemCoreClock = HSI_VALUE;
 8000b3c:	4b3a      	ldr	r3, [pc, #232]	; (8000c28 <SystemCoreClockUpdate+0x158>)
 8000b3e:	4a3c      	ldr	r2, [pc, #240]	; (8000c30 <SystemCoreClockUpdate+0x160>)
 8000b40:	601a      	str	r2, [r3, #0]
      break;
 8000b42:	e05c      	b.n	8000bfe <SystemCoreClockUpdate+0x12e>
    case 0x08U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000b44:	4b38      	ldr	r3, [pc, #224]	; (8000c28 <SystemCoreClockUpdate+0x158>)
 8000b46:	4a3b      	ldr	r2, [pc, #236]	; (8000c34 <SystemCoreClockUpdate+0x164>)
 8000b48:	601a      	str	r2, [r3, #0]
      break;
 8000b4a:	e058      	b.n	8000bfe <SystemCoreClockUpdate+0x12e>
    default:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000b4c:	4b35      	ldr	r3, [pc, #212]	; (8000c24 <SystemCoreClockUpdate+0x154>)
 8000b4e:	68da      	ldr	r2, [r3, #12]
 8000b50:	23f0      	movs	r3, #240	; 0xf0
 8000b52:	039b      	lsls	r3, r3, #14
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000b58:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <SystemCoreClockUpdate+0x154>)
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	23c0      	movs	r3, #192	; 0xc0
 8000b5e:	041b      	lsls	r3, r3, #16
 8000b60:	4013      	ands	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	0c9b      	lsrs	r3, r3, #18
 8000b68:	4a33      	ldr	r2, [pc, #204]	; (8000c38 <SystemCoreClockUpdate+0x168>)
 8000b6a:	5cd3      	ldrb	r3, [r2, r3]
 8000b6c:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	0d9b      	lsrs	r3, r3, #22
 8000b72:	3301      	adds	r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]

      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000b76:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <SystemCoreClockUpdate+0x154>)
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	025b      	lsls	r3, r3, #9
 8000b7e:	4013      	ands	r3, r2
 8000b80:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00U)
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d128      	bne.n	8000bda <SystemCoreClockUpdate+0x10a>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000b88:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <SystemCoreClockUpdate+0x154>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2210      	movs	r2, #16
 8000b8e:	4013      	ands	r3, r2
 8000b90:	d011      	beq.n	8000bb6 <SystemCoreClockUpdate+0xe6>
        {
          SystemCoreClock = (((HSI_VALUE / 4U) * pllmul) / plldiv);
 8000b92:	6939      	ldr	r1, [r7, #16]
 8000b94:	000a      	movs	r2, r1
 8000b96:	0152      	lsls	r2, r2, #5
 8000b98:	1a52      	subs	r2, r2, r1
 8000b9a:	0193      	lsls	r3, r2, #6
 8000b9c:	1a9b      	subs	r3, r3, r2
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	185b      	adds	r3, r3, r1
 8000ba2:	021b      	lsls	r3, r3, #8
 8000ba4:	68f9      	ldr	r1, [r7, #12]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff faaa 	bl	8000100 <__udivsi3>
 8000bac:	0003      	movs	r3, r0
 8000bae:	001a      	movs	r2, r3
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <SystemCoreClockUpdate+0x158>)
 8000bb2:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000bb4:	e022      	b.n	8000bfc <SystemCoreClockUpdate+0x12c>
          SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8000bb6:	6939      	ldr	r1, [r7, #16]
 8000bb8:	000a      	movs	r2, r1
 8000bba:	0152      	lsls	r2, r2, #5
 8000bbc:	1a52      	subs	r2, r2, r1
 8000bbe:	0193      	lsls	r3, r2, #6
 8000bc0:	1a9b      	subs	r3, r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	185b      	adds	r3, r3, r1
 8000bc6:	029b      	lsls	r3, r3, #10
 8000bc8:	68f9      	ldr	r1, [r7, #12]
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff fa98 	bl	8000100 <__udivsi3>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	001a      	movs	r2, r3
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <SystemCoreClockUpdate+0x158>)
 8000bd6:	601a      	str	r2, [r3, #0]
      break;
 8000bd8:	e010      	b.n	8000bfc <SystemCoreClockUpdate+0x12c>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 8000bda:	6939      	ldr	r1, [r7, #16]
 8000bdc:	000a      	movs	r2, r1
 8000bde:	0152      	lsls	r2, r2, #5
 8000be0:	1a52      	subs	r2, r2, r1
 8000be2:	0193      	lsls	r3, r2, #6
 8000be4:	1a9b      	subs	r3, r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	185b      	adds	r3, r3, r1
 8000bea:	025b      	lsls	r3, r3, #9
 8000bec:	68f9      	ldr	r1, [r7, #12]
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff fa86 	bl	8000100 <__udivsi3>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	001a      	movs	r2, r3
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <SystemCoreClockUpdate+0x158>)
 8000bfa:	601a      	str	r2, [r3, #0]
      break;
 8000bfc:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <SystemCoreClockUpdate+0x154>)
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	091b      	lsrs	r3, r3, #4
 8000c04:	220f      	movs	r2, #15
 8000c06:	4013      	ands	r3, r2
 8000c08:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <SystemCoreClockUpdate+0x16c>)
 8000c0a:	5cd3      	ldrb	r3, [r2, r3]
 8000c0c:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemCoreClockUpdate+0x158>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	40da      	lsrs	r2, r3
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <SystemCoreClockUpdate+0x158>)
 8000c18:	601a      	str	r2, [r3, #0]
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b006      	add	sp, #24
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	40021000 	.word	0x40021000
 8000c28:	20000044 	.word	0x20000044
 8000c2c:	003d0900 	.word	0x003d0900
 8000c30:	00f42400 	.word	0x00f42400
 8000c34:	007a1200 	.word	0x007a1200
 8000c38:	08000db4 	.word	0x08000db4
 8000c3c:	08000da4 	.word	0x08000da4

08000c40 <__NVIC_EnableIRQ>:
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	0002      	movs	r2, r0
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	1dfb      	adds	r3, r7, #7
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b7f      	cmp	r3, #127	; 0x7f
 8000c52:	d809      	bhi.n	8000c68 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	001a      	movs	r2, r3
 8000c5a:	231f      	movs	r3, #31
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_EnableIRQ+0x30>)
 8000c60:	2101      	movs	r1, #1
 8000c62:	4091      	lsls	r1, r2
 8000c64:	000a      	movs	r2, r1
 8000c66:	601a      	str	r2, [r3, #0]
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <init_timer2>:
 */

#include "timers.h"


void init_timer2(void){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0

	//Enable Timer2 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <init_timer2+0x74>)
 8000c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <init_timer2+0x74>)
 8000c7e:	2101      	movs	r1, #1
 8000c80:	430a      	orrs	r2, r1
 8000c82:	639a      	str	r2, [r3, #56]	; 0x38

    //Reset the peripheral.
    RCC->APB1RSTR |=  RCC_APB1RSTR_TIM2RST;
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <init_timer2+0x74>)
 8000c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <init_timer2+0x74>)
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
    RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM2RST;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <init_timer2+0x74>)
 8000c92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <init_timer2+0x74>)
 8000c96:	2101      	movs	r1, #1
 8000c98:	438a      	bics	r2, r1
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
    //Set prescaler to 2400 => 24MHz/2400 = 10000 ticks per second
    //TIM2->PSC   = 2399; //+1 (look datasheet)

    //Uncomment if 2.1MHz (MSI) clock is used
    //Set prescaler to 210 => 2.1MHz/210 = 10000 ticks per second
    TIM2->PSC   = 209; //+1 (look datasheet)
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	05db      	lsls	r3, r3, #23
 8000ca0:	22d1      	movs	r2, #209	; 0xd1
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28

    //Set autoreload to 10 so 10000/10 = 1000 interrupts per second
    TIM2->ARR   = 10;
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	05db      	lsls	r3, r3, #23
 8000ca8:	220a      	movs	r2, #10
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c

    //Send an update event to reset the timer and apply settings.
    TIM2->EGR  |= TIM_EGR_UG;
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	05db      	lsls	r3, r3, #23
 8000cb0:	695a      	ldr	r2, [r3, #20]
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	05db      	lsls	r3, r3, #23
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	615a      	str	r2, [r3, #20]
    //Enable the hardware interrupt.
    TIM2->DIER |= TIM_DIER_UIE;
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	05db      	lsls	r3, r3, #23
 8000cc0:	68da      	ldr	r2, [r3, #12]
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	05db      	lsls	r3, r3, #23
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	60da      	str	r2, [r3, #12]

    //Enable Timer 2
    TIM2->CR1  |= TIM_CR1_CEN;
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	05db      	lsls	r3, r3, #23
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	05db      	lsls	r3, r3, #23
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]

    //Enable the NVIC interrupt for TIM2
    NVIC_EnableIRQ(TIM2_IRQn);
 8000cdc:	200f      	movs	r0, #15
 8000cde:	f7ff ffaf 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021000 	.word	0x40021000

08000cec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cf0:	f7ff fee8 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf6:	490d      	ldr	r1, [pc, #52]	; (8000d2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <LoopForever+0xe>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d0c:	4c0a      	ldr	r4, [pc, #40]	; (8000d38 <LoopForever+0x16>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d1a:	f000 f811 	bl	8000d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d1e:	f7ff fc2f 	bl	8000580 <main>

08000d22 <LoopForever>:

LoopForever:
    b LoopForever
 8000d22:	e7fe      	b.n	8000d22 <LoopForever>
  ldr   r0, =_estack
 8000d24:	20000800 	.word	0x20000800
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000d30:	08000dc8 	.word	0x08000dc8
  ldr r2, =_sbss
 8000d34:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000d38:	20000198 	.word	0x20000198

08000d3c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC_COMP_IRQHandler>
	...

08000d40 <__libc_init_array>:
 8000d40:	b570      	push	{r4, r5, r6, lr}
 8000d42:	2600      	movs	r6, #0
 8000d44:	4d0c      	ldr	r5, [pc, #48]	; (8000d78 <__libc_init_array+0x38>)
 8000d46:	4c0d      	ldr	r4, [pc, #52]	; (8000d7c <__libc_init_array+0x3c>)
 8000d48:	1b64      	subs	r4, r4, r5
 8000d4a:	10a4      	asrs	r4, r4, #2
 8000d4c:	42a6      	cmp	r6, r4
 8000d4e:	d109      	bne.n	8000d64 <__libc_init_array+0x24>
 8000d50:	2600      	movs	r6, #0
 8000d52:	f000 f819 	bl	8000d88 <_init>
 8000d56:	4d0a      	ldr	r5, [pc, #40]	; (8000d80 <__libc_init_array+0x40>)
 8000d58:	4c0a      	ldr	r4, [pc, #40]	; (8000d84 <__libc_init_array+0x44>)
 8000d5a:	1b64      	subs	r4, r4, r5
 8000d5c:	10a4      	asrs	r4, r4, #2
 8000d5e:	42a6      	cmp	r6, r4
 8000d60:	d105      	bne.n	8000d6e <__libc_init_array+0x2e>
 8000d62:	bd70      	pop	{r4, r5, r6, pc}
 8000d64:	00b3      	lsls	r3, r6, #2
 8000d66:	58eb      	ldr	r3, [r5, r3]
 8000d68:	4798      	blx	r3
 8000d6a:	3601      	adds	r6, #1
 8000d6c:	e7ee      	b.n	8000d4c <__libc_init_array+0xc>
 8000d6e:	00b3      	lsls	r3, r6, #2
 8000d70:	58eb      	ldr	r3, [r5, r3]
 8000d72:	4798      	blx	r3
 8000d74:	3601      	adds	r6, #1
 8000d76:	e7f2      	b.n	8000d5e <__libc_init_array+0x1e>
 8000d78:	08000dc0 	.word	0x08000dc0
 8000d7c:	08000dc0 	.word	0x08000dc0
 8000d80:	08000dc0 	.word	0x08000dc0
 8000d84:	08000dc4 	.word	0x08000dc4

08000d88 <_init>:
 8000d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d8e:	bc08      	pop	{r3}
 8000d90:	469e      	mov	lr, r3
 8000d92:	4770      	bx	lr

08000d94 <_fini>:
 8000d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d9a:	bc08      	pop	{r3}
 8000d9c:	469e      	mov	lr, r3
 8000d9e:	4770      	bx	lr
